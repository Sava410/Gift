from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from peewee import *
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
API_ID = 29809992
API_HASH = "81e8cc2932d652f2ca7c4576cc0bd500"
BOT_TOKEN = "7749886683:AAGlPYtsMOTUTulH496s5vO9vsLpovSUIBo"

ADMIN_ID = "@Pepe_abmin1"  # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
db = SqliteDatabase("stars.db")

class User(Model):
    user_id = IntegerField(unique=True)
    stars = IntegerField(default=0)

    class Meta:
        database = db

db.connect()
db.create_tables([User], safe=True)

# --- –ü–æ–º–æ—â–Ω–∏–∫–∏ –ø–æ –ë–î ---
def add_user_if_not_exists(user_id):
    user, created = User.get_or_create(user_id=user_id)
    if created:
        user.stars = 0
        user.save()

def get_stars(user_id):
    user = User.get_or_none(User.user_id == user_id)
    return user.stars if user else 0

def add_stars(user_id, amount):
    user = User.get_or_none(User.user_id == user_id)
    if not user:
        user = User.create(user_id=user_id, stars=0)
    user.stars += amount
    user.save()

def spend_stars(user_id, amount):
    user = User.get_or_none(User.user_id == user_id)
    if user and user.stars >= amount:
        user.stars -= amount
        user.save()
        return True
    return False

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
app = Client("gift_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# --- –ö–Ω–æ–ø–∫–∏ ---
stars_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å 100 ‚≠ê", callback_data="add_100"),
     InlineKeyboardButton("–°–ø–∏—Å–∞—Ç—å 100 ‚≠ê", callback_data="spend_100")],
    [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å 300 ‚≠ê", callback_data="add_300"),
     InlineKeyboardButton("–°–ø–∏—Å–∞—Ç—å 300 ‚≠ê", callback_data="spend_300")],
    [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å 500 ‚≠ê", callback_data="add_500"),
     InlineKeyboardButton("–°–ø–∏—Å–∞—Ç—å 500 ‚≠ê", callback_data="spend_500")],
    [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å 1000 ‚≠ê", callback_data="add_1000"),
     InlineKeyboardButton("–°–ø–∏—Å–∞—Ç—å 1000 ‚≠ê", callback_data="spend_1000")],
])

# --- –°–ª–æ–≤–∞—Ä—å –¥–ª—è pending —Å–ø–∏—Å–∞–Ω–∏–π ---
pending_spends = {}

# --- –ö–æ–º–∞–Ω–¥–∞ /stars –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏ –º–µ–Ω—é ---
@app.on_message(filters.command("stars") & filters.private)
async def stars_menu(client, message):
    user_id = message.from_user.id
    add_user_if_not_exists(user_id)
    stars = get_stars(user_id)
    await message.reply_text(
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {stars} ‚≠ê.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=stars_keyboard
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å–ø–∏—Å–∞–Ω–∏—è ---
@app.on_callback_query(filters.regex(r"add_\d+|spend_\d+"))
async def handle_stars_buttons(client, callback_query):
    user_id = callback_query.from_user.id
    data = callback_query.data
    amount = int(data.split("_")[1])

    add_user_if_not_exists(user_id)
    stars = get_stars(user_id)

    if data.startswith("add_"):
        add_stars(user_id, amount)
        stars = get_stars(user_id)
        await callback_query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} ‚≠ê!")
        await callback_query.message.edit_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {stars} ‚≠ê", reply_markup=stars_keyboard)

    elif data.startswith("spend_"):
        if stars < amount:
            await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è!", show_alert=True)
            return
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        pending_spends[user_id] = amount
        await callback_query.answer()
        await callback_query.message.reply_text(
            f"–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ {amount} ‚≠ê.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–µ–∑–¥ –≤ Telegram.\n"
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–≤–µ–∑–¥—ã –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã."
        )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@app.on_message(filters.private & (filters.photo | filters.text))
async def handle_confirmation(client, message):
    user_id = message.from_user.id
    if user_id in pending_spends:
        amount = pending_spends[user_id]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        admin_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ {amount} ‚≠ê.\n"
        admin_msg += f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n"
        if message.photo:
            admin_msg += "(–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)"
            await message.photo[-1].download(f"confirm_{user_id}.jpg")  # —Å–æ—Ö—Ä–∞–Ω–∏–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
        else:
            admin_msg += message.text or "–±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        await client.send_message(ADMIN_ID, admin_msg + f"\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /approve_spend {user_id} –∏–ª–∏ /deny_spend {user_id}")
        await message.reply("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        del pending_spends[user_id]

# --- –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ ---
@app.on_message(filters.user(ADMIN_ID) & filters.command("approve_spend"))
async def approve_spend(client, message):
    args = message.text.split()
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve_spend user_id")
        return
    try:
        user_id = int(args[1])
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π user_id")
        return
    amount = None
    # –ù–∞—Ö–æ–¥–∏–º pending –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –±—ã–ª)
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è: –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º amount, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ (–ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –ë–î –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤)
    if user_id in pending_spends:
        amount = pending_spends[user_id]
        del pending_spends[user_id]
    else:
        await message.reply("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if spend_stars(user_id, amount):
        await message.reply(f"–°–ø–∏—Å–∞–Ω–æ {amount} ‚≠ê —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await client.send_message(user_id, f"–í–∞—à–µ —Å–ø–∏—Å–∞–Ω–∏–µ {amount} ‚≠ê –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await message.reply("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.")

# --- –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ ---
@app.on_message(filters.user(ADMIN_ID) & filters.command("deny_spend"))
async def deny_spend(client, message):
    args = message.text.split()
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deny_spend user_id")
        return
    try:
        user_id = int(args[1])
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π user_id")
        return
    if user_id in pending_spends:
        del pending_spends[user_id]
        await message.reply(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        await client.send_message(user_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–µ–∑–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await message.reply("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ.")

# --- –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ ---
@app.on_message(filters.command("buy") & filters.private)
async def buy_gift(client, message):
    user_id = message.from_user.id
    add_user_if_not_exists(user_id)

    args = message.text.split()
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy <—Ü–µ–Ω–∞_–≤_–∑–≤–µ–∑–¥–∞—Ö>")
        return
    try:
        price = int(args[1])
    except ValueError:
        await message.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    stars = get_stars(user_id)
    if stars < price:
        await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –£ –≤–∞—Å {stars} ‚≠ê, –Ω—É–∂–Ω–æ {price} ‚≠ê.")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
    spend_stars(user_id, price)

    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ "–≤—ã–∫—É–ø–∞ –ø–æ–¥–∞—Ä–∫–∞"
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await message.reply(f"–ü–æ–¥–∞—Ä–æ–∫ –∑–∞ {price} ‚≠ê —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É üéÅ")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run()
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton

gift_price = 1000


@app.on_message(filters.command("start"))
async def start(client, message):
    buttons = [
        [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="show_recharge")],
        [InlineKeyboardButton(f"–í—ã—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ ({gift_price}‚≠ê)", callback_data="give_gift")]
    ]
    await message.reply("–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(buttons))


